{"version":3,"sources":["misc.js","ColorPicker.js","ColorOptions.js","FontOptions.js","IconOptions.js","ShapeOptions.js","HistoryPalette.js","AnimationOptions.js","TextOptions.js","App.js","serviceWorker.js","index.js"],"names":["cmap","v","i1","i2","o1","o2","min","max","Math","clamp","map","setEnding","group","t","i","traversed","total","current","_","each","children","child","distance","distances","pct","ending","makeGradient","rect","colors","two","index","linearGradient","makeLinearGradient","width","height","Two","Stop","fill","ColorPicker","props","handleClick","setState","displayColorPicker","state","handleClose","handleChange","color","hex","styles","reactCSS","borderRadius","background","this","swatch","padding","boxShadow","display","cursor","popover","position","zIndex","cover","top","right","bottom","left","id","style","onClick","onChange","handlechange","React","Component","ColorOptions","check","select","type","isGradient","grad","colorChange","solid","className","FontOptions","fontName","htmlFor","name","onchange","textClick","IconOptions","svgClick","size","Types","svg","fullscreen","shapeDiv","document","getElementById","appendTo","circle","makeCircle","makeRectangle","line","makeLine","linewidth","star","makeStar","rounded","makeRoundedRectangle","pentagon","makePolygon","hexagon","makeGroup","update","onclick","HistoryPalette","TextOptions","updateText","textColor","useFill","fillColor","rectangle","Group","links","createSVG","font","text","svgElement","createElementNS","path","getPath","toSVG","pathElement","DOMParser","parseFromString","firstChild","appendChild","App","points","loaded","hide","selectedSVG","bind","updateFont","updateBG","updateColorState","updateHide","selectShape","setSVG","removePoints","draw","loadWebFont","updateTextColor","drawingBoard","ctx","translation","set","renderBG","instantDraw","noStroke","opentype","load","err","loadedfont","console","log","e","length","nativeEvent","target","checked","innerText","link","unbind","undefined","interpret","noFill","center","stroke","clear","element","elem","x","y","a","d","vertices","b","distanceTo","resize","play","value","file","files","reader","FileReader","input","onload","parse","result","fileName","startindex","indexOf","lastIndexOf","substring","readAsArrayBuffer","hasAttribute","nodeName","div","removeShape","clientX","clientY","newPoints","scale","makeSVG","push","shape","removeSVG","oldshape","remove","pop","point","style1","onContextMenu","ShapeOptions","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ede8945a.chunk.js","sourcesContent":["import _ from 'underscore';\r\nimport Two from 'two.js';\r\n// Moves the text to middle of the newly sized page\r\nexport function resize(svg, two) {\r\n    svg.translation.set(two.width / 2, two.height / 2);\r\n}\r\n\r\nexport function calculateDistances(group) {\r\n    // For each path\r\n    return _.map(group.children, function(child) {\r\n        var d = 0, a;\r\n        // For each vertice find the distance between them\r\n        _.each(child.vertices, function(b, i) {\r\n            // Skip the first vertice\r\n            if (i > 0) {\r\n                d += a.distanceTo(b);\r\n            }\r\n            a = b;\r\n            });\r\n        return d;\r\n    });\r\n}\r\n\r\n// If value is above max set it to the max value \r\n// If value is above the min set it to minimum value\r\n// Else set to it the value\r\nexport function clamp(v, min, max) {\r\n    return Math.max(Math.min(v, max), min);\r\n}\r\n\r\n// Normalize values to 1\r\n// (value-min) / (max-min)\r\nexport function map(v, i1, i2, o1, o2) {\r\n    return o1 + (o2 - o1) * ((v - i1) / (i2 - i1));\r\n}\r\n\r\n// Normalizes each value then clamp it \r\nexport function cmap(v, i1, i2, o1, o2) {\r\n    return clamp(map(v, i1, i2, o1, o2), o1, o2);\r\n}\r\n\r\nexport function setEnding(group, t) {\r\n    // Current iteration\r\n    var i = 0;\r\n    // t is a percentage, group.total is total distance \r\n    var traversed = t * group.total;\r\n    var current = 0;\r\n    //console.log(group.children)\r\n    // For each path in group\r\n    _.each(group.children, function(child) {\r\n      var distance = group.distances[i];\r\n      // Minimum distance\r\n      var min = current;\r\n      // Maximum distance\r\n      var max = current + distance;\r\n      // End point\r\n      var pct = cmap(traversed, min, max, 0, 1);\r\n      // Set endpoint\r\n      child.ending = pct;\r\n      // Set new current to max\r\n      current = max;\r\n      i++;\r\n    });\r\n}\r\n\r\nexport function makeGradient(rect, colors, two){\r\n    colors.index = 0;\r\n    var linearGradient = two.makeLinearGradient(\r\n        two.width / 2, - two.height / 2,\r\n        two.width / 2, two.height / 2,\r\n        new Two.Stop(0, colors[0]),\r\n        new Two.Stop(0.5, colors[1]),\r\n        new Two.Stop(1, colors[2])\r\n    );\r\n\r\n    rect.fill = linearGradient;\r\n    return rect;\r\n}\r\n\r\n\r\n/*\r\nexport function clearT(svg, t) {\r\n    t = 0;\r\n    setEnding(svg, 0);\r\n    let startOver = _.after(60, clearT);\r\n    return startOver, t\r\n};*/","import React from 'react'\r\nimport reactCSS from 'reactcss'\r\nimport { SketchPicker } from 'react-color'\r\n\r\nclass ColorPicker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      displayColorPicker: false\r\n    };\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState({ displayColorPicker: !this.state.displayColorPicker })\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ displayColorPicker: false })\r\n  };\r\n\r\n  handleChange = (color) => {\r\n    this.setState({ color: color.hex })\r\n  };\r\n\r\n  render() {\r\n    const styles = reactCSS({\r\n      'default': {\r\n        color: {\r\n          width: '36px',\r\n          height: '14px',\r\n          borderRadius: '2px',\r\n          background: this.props.color\r\n        },\r\n        swatch: {\r\n          padding: '5px',\r\n          background: '#fff',\r\n          borderRadius: '1px',\r\n          boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\r\n          display: 'inline-block',\r\n          cursor: 'pointer',\r\n        },\r\n        popover: {\r\n          position: 'absolute',\r\n          zIndex: '2',\r\n        },\r\n        cover: {\r\n          position: 'fixed',\r\n          top: '0px',\r\n          right: '0px',\r\n          bottom: '0px',\r\n          left: '0px',\r\n        },\r\n      },\r\n    });\r\n\r\n    return (\r\n      <div id={this.props.id}>\r\n        <div style={ styles.swatch } onClick={ this.handleClick }>\r\n          <div style={ styles.color } />\r\n        </div>\r\n        { this.state.displayColorPicker ? <div style={ styles.popover }>\r\n          <div style={ styles.cover } onClick={ this.handleClose }/>\r\n          <SketchPicker color={this.props.color} onChange={ this.props.handlechange} />\r\n        </div> : null }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ColorPicker;","import React from 'react';\r\nimport ColorPicker from './ColorPicker'\r\n\r\nclass ColorOptions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let check = null;\r\n        let select = null;\r\n        check = \r\n            <div>\r\n                <label>Background: Gradient</label>\r\n                <input type=\"checkbox\" onClick={this.props.check} id=\"checkbg\"/>\r\n            </div>\r\n        \r\n        if(this.props.isGradient){\r\n            select = \r\n                <div style={{display: \"flex\"}}> \r\n                    Gradient Color:\r\n                    <ColorPicker color={this.props.grad[0]} handlechange={this.props.colorChange} id=\"grad0\"/>\r\n                    <ColorPicker color={this.props.grad[1]} handlechange={this.props.colorChange} id=\"grad1\"/>\r\n                    <ColorPicker color={this.props.grad[2]} handlechange={this.props.colorChange} id=\"grad2\"/>\r\n                </div>\r\n        } else {\r\n            select = \r\n                <div style={{display: \"flex\"}}>\r\n                    Solid Color:\r\n                    <ColorPicker color={this.props.solid} handlechange={this.props.colorChange} id=\"solid\"/>\r\n                </div>\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                <div className={\"center\" + \" bold\"}>\r\n                    Background Options:\r\n                </div>\r\n            <div>\r\n                {check}\r\n                {select}\r\n            </div>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default ColorOptions;","import React from 'react';\r\nclass FontOptions extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className={\"center\" + \" bold\"}>\r\n                    Font Options:\r\n                </div>\r\n                <div className=\"flex\">\r\n                Font Selected: \r\n                    <div id=\"fontselected\">\r\n                    {this.props.fontName}\r\n                    </div>\r\n                </div>\r\n                <div id=\"fontinput\">\r\n                    <label htmlFor=\"file\">Upload Font:</label>\r\n                    <input type=\"file\" id=\"file\" name=\"file\" onChange={this.props.onchange}/>\r\n                </div>\r\n                <label>Preloaded Fonts:</label>\r\n                <div className=\"flex\">\r\n                    <button onClick={this.props.textClick}>Roboto</button>\r\n                    <button onClick={this.props.textClick}>Fira Sans</button>\r\n                    <button onClick={this.props.textClick}>Yellowtail</button>\r\n                    <button onClick={this.props.textClick}>Saira</button>\r\n                    <button onClick={this.props.textClick}>Quicksand</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FontOptions;","import React from 'react';\r\nimport { FaGithub, FaLinkedin, FaInstagram, FaTwitter, FaEnvelope} from 'react-icons/fa';\r\nimport reactCSS from 'reactcss';\r\n\r\nclass IconOptions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>Icons:</div>\r\n                <div id=\"iconsvg\">\r\n                    <FaLinkedin onClick={this.props.svgClick} size={32} />\r\n                    <FaGithub onClick={this.props.svgClick} size={32} />\r\n                    <FaInstagram onClick={this.props.svgClick} size={32} />\r\n                    <FaTwitter onClick={this.props.svgClick} size={32} />\r\n                    <FaEnvelope onClick={this.props.svgClick} size={32} />\r\n                </div>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default IconOptions;","import React from 'react';\r\nimport Two from 'two.js';\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nclass IconOptions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount(){\r\n        var two = new Two({\r\n            type: Two.Types.svg,\r\n            fullscreen: false,\r\n            width: 400,\r\n            height: 32\r\n        });\r\n        let shapeDiv = document.getElementById(\"shapes\");\r\n        two.appendTo(shapeDiv);\r\n        var circle = two.makeCircle(16, 16, 15);\r\n        var rect = two.makeRectangle(48, 16, 31, 31);\r\n        var line = two.makeLine(64, 16, 96, 16);\r\n        line.linewidth = 8;\r\n        var star = two.makeStar(112, 16, 32, 16, 5);\r\n        var rounded = two.makeRoundedRectangle(144, 16, 31, 31);\r\n        var pentagon = two.makePolygon(176, 16, 16, 5);\r\n        var hexagon = two.makePolygon(208, 16, 16, 6);\r\n        var group = two.makeGroup(circle, rect, line, star, rounded, pentagon, hexagon)\r\n        group.fill = \"black\"\r\n        two.update();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>Shapes:</div>\r\n                <div id=\"shapes\" onClick={this.props.onclick}>\r\n                </div>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default IconOptions;","import React from 'react';\r\n\r\nclass HistoryPalette extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className={\"center\" + \" bold\"}>\r\n                    History and Element Options:\r\n                </div>\r\n                <div>History:</div>\r\n                <button onClick={this.props.onclick}>Undo</button>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default HistoryPalette;","import React from 'react';\r\n\r\nclass IconOptions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>Animation Type:</div>\r\n                <div>\r\n                </div>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default IconOptions;","import React from 'react';\r\nimport ColorPicker from './ColorPicker'\r\nclass TextOptions extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <div className={\"center\" + \" bold\"}>\r\n                    Text Options:\r\n                    </div>\r\n                    <label>Choose Text:</label>\r\n                    <input id=\"textin\" type=\"text\" onChange={this.props.updateText}/>\r\n                    <div className=\"flex\">\r\n                        <label>Text Color:</label>\r\n                        <ColorPicker color={this.props.textColor} handlechange={this.props.onchange} id=\"text\"/>\r\n                    </div>\r\n                    <div className=\"flex\">\r\n                        <label>Fill:</label>\r\n                        <input onChange={this.props.useFill} type=\"checkbox\"/>\r\n                    </div>\r\n                    <div className=\"flex\">\r\n                        <label>Fill Color:</label>\r\n                        <ColorPicker color={this.props.fillColor} handlechange={this.props.onchange} id=\"fill\"/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//<ColorPicker color={this.props.fillColor} onChange={this.props.onchange}/>\r\nexport default TextOptions;","import React from 'react';\nimport Two from 'two.js';\nimport opentype from 'opentype.js';\nimport {setEnding, calculateDistances, resize, makeGradient} from './misc';\nimport ColorOptions from './ColorOptions';\nimport FontOptions from './FontOptions';\nimport IconOptions from './IconOptions';\nimport ShapeOptions from './ShapeOptions';\nimport AnimationOptions from './AnimationOptions';\nimport HistoryPallete from './HistoryPalette';\nimport TextOptions from './TextOptions';\nimport _ from 'underscore';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nvar two = null;\nvar t = 0;\nvar rectangle = null;\nvar svg = new Two.Group();\nvar links = [\"http://gavingosling.me/fonts/Roboto-thin.ttf\",\"https://opentype.js.org/fonts/FiraSansMedium.woff\", \"http://gavingosling.me/fonts/Yellowtail-Regular.ttf\", \"http://gavingosling.me/fonts/SairaCondensed-Light.ttf\", \"http://gavingosling.me/fonts/Quicksand.ttf\"]\n\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            text: \"null\",\n            svg :  null,\n            font:  null, \n            fill: false,\n            textColor: \"#ffffff\",\n            fillColor: \"#ffffff\",\n            fontName : \"Fira Sans\",\n            t   :  0,\n            isGradient : false,\n            grad       : ['#ff4040', '#ff8000', '#00c8ff'],\n            solid      : \"#AB2567\",\n            rectangle  : null,\n            points :  [],  \n            loaded : false,\n            hide   : false,\n            selectedSVG: null,\n            svg : null,\n            shape : null\n        }\n\n        this.updateText = this.updateText.bind(this);\n        this.updateFont = this.updateFont.bind(this);\n        this.updateBG = this.updateBG.bind(this);\n        this.updateColorState = this.updateColorState.bind(this);\n        this.updateHide = this.updateHide.bind(this);\n        this.selectShape = this.selectShape.bind(this);\n        this.setSVG = this.setSVG.bind(this);\n        this.removePoints = this.removePoints.bind(this);\n        this.svgClick = this.svgClick.bind(this);\n        this.draw = this.draw.bind(this);\n        this.loadWebFont = this.loadWebFont.bind(this);\n        this.updateTextColor = this.updateTextColor.bind(this);\n        this.useFill = this.useFill.bind(this);\n    }\n\n    componentDidMount(){\n        // Load TwoJs Instance\n        two = new Two({\n            type: Two.Types.svg,\n            fullscreen: true\n        });\n        let drawingBoard = document.getElementById(\"drawingBoard\");\n        two.appendTo(drawingBoard);\n        let ctx = this;\n        two.bind('resize', function(){\n            svg.translation.set(two.width / 2, two.height / 2)\n            ctx.renderBG();\n            ctx.instantDraw();\n        }) \n\n        // Set Color\n        rectangle = two.makeRectangle(two.width / 2, two.height / 2, two.width, two.height);\n        rectangle.noStroke();\n        rectangle.fill = this.state.solid;\n\n        // Load Font\n        opentype.load('https://opentype.js.org/fonts/FiraSansMedium.woff', function(err, loadedfont) {\n            if (err) {\n                 console.log('Font could not be loaded: ' + err);\n            } else {\n                ctx.setState({ font: loadedfont, fontName: \"Fira Sans\" })\n                ctx.draw();\n            }\n        });\n    }\n\n    updateTextColor(color, e){\n        let text = document.getElementById(\"text\");\n        let fill = document.getElementById(\"fill\");\n        //console.log(text.children)\n        if(text.children.length > 1){\n            this.setState({\n                ...this.state,\n                textColor: color.hex\n            })\n        }\n        if(fill.children.length > 1){\n            this.setState({\n                ...this.state,\n                fillColor: color.hex\n            })\n        }\n    }\n\n    useFill(e){\n        let checked = e.nativeEvent.target.checked\n        if(checked){\n            this.setState({...this.state,fill: true})\n        } else {\n            this.setState({...this.state,fill: false})\n        }\n    }\n\n    renderBG(){\n        rectangle = two.makeRectangle(two.width / 2, two.height / 2, two.width, two.height);\n        rectangle.noStroke();\n        if(this.state.isGradient){\n            rectangle = makeGradient(rectangle, this.state.grad, two);\n        } else {\n            rectangle.fill = this.state.solid;\n        }\n\n    }\n\n    loadWebFont(e){\n        // Load Font\n        let target = e.nativeEvent.target.innerText;\n        let index = 0;\n        switch (target){\n            case \"Roboto\":\n                index = 0;\n                break;\n            case \"Fira Sans\":\n                index = 1;\n                break;\n            case \"Yellowtail\":\n                index = 2;\n                break;\n            case \"Saira\":\n                index = 3;\n                break;\n            case \"Quicksand\":\n                index = 4;\n                break;\n            default:\n                break;\n        }\n        let link = links[index];\n        let ctx = this;\n        opentype.load(link, function(err, loadedfont) {\n            if (err) {\n                 console.log('Font could not be loaded: ' + err);\n            } else {\n                ctx.setState({ font: loadedfont, fontName: target })\n            }\n        });\n    }\n\n    instantDraw(){\n        if(this.state.font != null && this.state.text != null){\n            two.unbind('update') \n            let svgElement = createSVG(this.state.font, this.state.text).svg;\n            if(svg != null || svg != undefined){\n                console.log(svgElement)\n                svg = two.interpret(svgElement);\n                if(!this.state.fill){\n                    svg.noFill();\n                } else {\n                    svg.fill = this.state.fillColor;\n                }\n                svg.center()\n                svg.translation.set(two.width / 2, two.height / 2);\n                svg.stroke = this.state.textColor;\n                svg.linewidth = 1;\n            }\n        }\n    }\n\n    draw() {\n        if(svg != null){\n            two.unbind('update')\n            if(svg.distances != null){\n                setEnding(svg, 0);\n            }\n            t = 0;\n            two.clear();\n            this.renderBG();\n        }\n        // Create the SVG for Twojs\n        let result = createSVG(this.state.font, this.state.text);\n        let svgElement = result.svg;\n        // Convert SVG to Twojs Group\n        if(this.state.points.length >= 1) {\n            let points = this.state.points;\n            for (let index = 0; index < points.length; index++) {\n                let element = points[index];\n                element = element.svg;\n                let path = document.getElementById(element.id);\n                let elem = two.interpret(path);\n                elem.translation.set(points[index].x, points[index].y);\n                if(!this.state.fill){\n                    elem.noFill();\n                } else {\n                    elem.fill = this.state.fillColor;\n                }\n                elem.stroke = this.state.textColor;\n                elem.linewidth = 1;\n            }\n        }\n        svg = two.interpret(svgElement);\n        // Dont fill inside the shape\n        if(!this.state.fill){\n            svg.noFill();\n        } else {\n            svg.fill = this.state.fillColor;\n        }\n        // Percentage of SVG drawn\n        // Sets vertices around center of group\n        svg.center()\n        // Translates to center of screen\n        svg.translation.set(two.width / 2, two.height / 2);\n        // Color of strokes between vertices \n        svg.stroke = this.state.textColor;\n        // Width of the strokes \n        svg.linewidth = 1;\n        // Find the distance between each vertice\n        svg.distances = calculateDistances(svg);\n        // Total distance made so far\n        svg.total = 0;\n        _.each(svg.distances, function(d) {\n            svg.total += d;\n        });\n        resize(svg, two);\n        // Callbacks for update (called each frame at 60fps) and on page resize\n        two.bind('update', function() {\n                if (t < 0.9999) {\n                    // How fast the text is gone through\n                    t += 0.00625;\n                    // 2.67 sec at 0.00625\n                } else {\n                    two.unbind('update')\n                }\n                setEnding(svg, t);\n        })\n        two.play();\n    }\n\n    updateText(e){\n        if(e != undefined){\n            e = e.nativeEvent;\n            this.setState({\n                ...this.state, \n                text: e.target.value\n            })\n        }\n    }\n\n    updateFont(e){\n        e = e.nativeEvent;\n        var file = e.target.files[0];\n        var reader = new FileReader();\n        let input = e.target;\n        let read = function(e) {\n            try {\n                let font = opentype.parse(e.target.result);\n                let fileName = input.value;\n                let startindex = (fileName.indexOf('\\\\') >= 0 ? fileName.lastIndexOf('\\\\') : fileName.lastIndexOf('/'))\n                fileName = fileName.substring(startindex)\n                if (fileName.indexOf('\\\\') === 0 || fileName.indexOf('/') === 0) {\n                    fileName = fileName.substring(1);\n                }\n                this.setState({\n                    ...this.state, \n                    font: font,\n                    fontName: fileName\n                })\n            } catch (err) {\n                console.log(err)\n            }\n        }\n        reader.onload = read.bind(this);\n        reader.readAsArrayBuffer(file);\n    }\n\n    updateColorState(color, e){\n        rectangle = two.makeRectangle(two.width / 2, two.height / 2, two.width, two.height);\n        rectangle.noStroke();\n\n        if(this.state.isGradient){\n            if('nativeEvent' in e){\n                e = e.nativeEvent;\n            } \n            if(e != undefined){\n                let id = null;\n                for (let index = 0; index < e.path.length; index++) {\n                    var element = e.path[index];\n                    if(element.hasAttribute('id')){\n                        id = e.path[index].id;\n                        break;\n                    }\n                }\n                let index = 0;\n                switch(id){\n                    case \"grad0\":\n                        index = 0;\n                        break;\n                    case \"grad1\":\n                        index = 1;\n                        break;\n                    case \"grad2\":\n                        index = 2;\n                        break;\n                    default:\n                        console.log(\"error\")\n                        console.log(e)\n                        return;\n                }\n                let result = this.state.grad;\n                result[index] = color.hex;\n                this.setState({\n                    grad: result\n                })\n            }\n            rectangle = makeGradient(rectangle, this.state.grad, two);\n\n        } else {\n            this.setState({\n                ...this.state,\n                solid: color.hex\n            })\n            rectangle.fill = this.state.solid;\n        }\n    }\n\n    updateBG(){\n        rectangle = two.makeRectangle(two.width / 2, two.height / 2, two.width, two.height);\n        rectangle.noStroke();\n        if(this.state.isGradient){\n            this.setState({...this.state, isGradient: false});\n            rectangle.fill = this.state.solid;\n        } else {\n            this.setState({...this.state, isGradient: true});\n            rectangle = makeGradient(rectangle, this.state.grad, two);\n        }\n    }\n\n    updateHide(){\n        if(this.state.hide){\n            this.setState({hide: false});\n        } else {\n            this.setState({hide: true});\n        }\n    }\n\n    svgClick(e){\n        e = e.nativeEvent;\n        let svg = null;\n        for (let index = 0; index < e.path.length; index++) {\n            var element = e.path[index];\n            if(element.nodeName == 'svg'){\n                svg = e.path[index];\n                break;\n            }\n        }\n\n        let div = document.getElementById(\"iconsvg\").children;\n        for (let index = 0; index < div.length; index++) {\n            const element = div[index];\n            if(element == svg){\n                if(element != this.state.selectedSVG){\n                    element.style.fill = \"blue\";\n                    this.setState({ selectedSVG: svg})\n                    this.removeShape();\n                } else {\n                    element.style.fill = \"black\";\n                    this.setState({ selectedSVG: null})\n                }  \n            } else {\n                element.style.fill = \"black\";\n            }\n        }\n    }\n\n    setSVG(e){\n        if(this.state.selectedSVG != null){\n            let x = e.clientX;\n            let y = e.clientY;\n            let newPoints = this.state.points;\n            let svg = null;\n            svg = makeSVG(this.state.selectedSVG, x , y);\n            newPoints.push({x: x, y: y, svg: svg})\n            this.setState({ points: newPoints });\n        } else if(this.state.shape != null) {\n            let x = e.clientX;\n            let y = e.clientY;\n            let shape = this.state.shape;\n            shape = two.interpret(shape);\n            shape.translation.set(x, y);\n            let newPoints = this.state.points;\n            newPoints.push({x: x, y: y, svg: shape})\n            this.setState({points: newPoints})\n        } else {\n            console.log(\"empty\")\n        }\n    }\n\n    selectShape(e){\n        if(e.nativeEvent.path[0].nodeName == \"path\"){\n            let shape = e.nativeEvent.path[0];\n            // Current shape is not the same shape.\n            // There is no shape selected currently\n            if(this.state.shape == null){\n                shape.style.fill = \"blue\";\n                shape.style.stroke = \"blue\";\n                this.setState({ shape: shape}) \n                this.removeSVG();\n            // Current shape is the same shape\n            } else if (this.state.shape == shape) {\n                shape.style.fill = \"black\";\n                shape.style.stroke = \"black\";\n                this.setState({ shape: null}) \n            } else {\n                let oldshape = this.state.shape;\n                oldshape.style.fill = \"black\";\n                oldshape.style.stroke = \"black\";\n                shape.style.fill = \"blue\";\n                shape.style.stroke = \"blue\";\n                this.setState({ shape: shape}) \n                this.removeSVG();\n                \n            }\n        }\n    }\n\n    removeSVG(){\n        if(this.state.selectedSVG){\n            let svg = this.state.selectedSVG;\n            svg.style.fill = \"black\";\n            this.setState({selectedSVG: null})\n        }\n    }\n\n    removeShape(){\n        if(this.state.shape){\n            let shape = this.state.shape;\n            shape.style.fill = \"black\";\n            shape.style.stroke = \"black\";\n            this.setState({shape: null})\n        }\n    }\n\n    removePoints(){\n        if(this.state.points.length >= 1){\n            let lastPoint = this.state.points[this.state.points.length-1];\n            lastPoint.svg.remove();\n            let newPoints = this.state.points;\n            newPoints.pop();\n            this.setState({ point: newPoints });\n        }\n    }\n\n    render() {\n        if(this.state.hide){\n            let style1 = \"center\";\n            let style2 = \"small\";\n            return (\n                    <div>\n                        <div id=\"form\" className={style1 + \" \" + style2}>\n                            <button id=\"draw\" onClick={this.draw}>Draw</button>\n                            <button id=\"hide\" onClick={this.updateHide}>Show</button>\n                        </div>\n                        <div id=\"drawingBoard\" onClick={this.setSVG} >\n                        </div>\n                    </div>\n                   )\n        } else {\n            return (\n                <div>\n                    <div id=\"form\" className=\"flex-col\" onContextMenu={this.removePoints}>\n                    <TextOptions fillColor={this.state.fillColor} updateText={this.updateText} useFill={this.useFill} textColor={this.state.textColor} onchange={this.updateTextColor}/>\n                    <FontOptions fontName={this.state.fontName} onchange={this.updateFont} textClick={this.loadWebFont}/>\n                    <ColorOptions isGradient={this.state.isGradient} check={this.updateBG} grad={this.state.grad} solid={this.state.solid} colorChange={this.updateColorState}/>\n                    <div>\n                        <div className={\"center\" + \" bold\"}>\n                            Shape and Icon Options:\n                        </div>\n                        <ShapeOptions onclick={this.selectShape}/>\n                        <IconOptions svgClick={this.svgClick}/>\n                    </div>\n                    <HistoryPallete onclick={this.removePoints}/>\n                    <div className=\"center\">\n                        <button id=\"draw\" onClick={this.draw}>Draw</button>\n                        <button id=\"hide\" onClick={this.updateHide}>Hide</button>\n                    </div>\n                    </div>\n                    <div id=\"drawingBoard\" onClick={this.setSVG} >\n                    </div>\n              </div>\n            )\n        }\n    }\n}\n\n/*\n                        <label>URL:</label>\n                        <input id=\"checkurl\" type=\"checkbox\" onClick={this.updateInput}/>\n*/\nfunction createSVG(font, text){\n    let svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    let path = font.getPath(text, 0, 150, 100);\n    path = path.toSVG();\n    let pathElement = new DOMParser().parseFromString(path, \"text/xml\");\n    pathElement = pathElement.firstChild;\n    svgElement.appendChild(pathElement);\n    return {svg: svgElement, path: pathElement}\n} \n\nfunction makeSVG(svg, x, y){\n    if(svg != null){\n        svg = two.interpret(svg);\n        svg.noFill();\n        svg.scale = 0.25;\n        svg.center()\n        svg.translation.set(x, y);\n        svg.stroke = 'white';\n        svg.linewidth = 1;\n        return svg;\n    }\n}\n\n/*\n    draw() {\n        if(svg != null){\n            two.unbind('update')\n            if(svg.distances != null){\n                setEnding(svg, 0);\n            }\n            t = 0;\n            two.clear();\n            this.renderBG();\n        }\n        // Create the SVG for Twojs\n        let result = createSVG(this.state.font, this.state.text);\n        let svgElement = result.svg;\n        //let pathElement = result.path;\n        // Convert SVG to Twojs Group\n        if(this.state.points.length >= 1) {\n            let points = this.state.points;\n            for (let index = 0; index < points.length; index++) {\n                let element = points[index];\n                element = element.svg;\n                let path = document.getElementById(element.id);\n                let elem = two.interpret(path);\n                elem.translation.set(points[index].x, points[index].y);\n                elem.noFill();\n                elem.stroke = 'white';\n                elem.linewidth = 1;\n                svg.add(elem);\n            }\n        }\n        let text = two.interpret(svgElement);\n        // Dont fill inside the shape\n        text.noFill();\n        // Percentage of SVG drawn\n        // Sets vertices around center of group\n        text.center()\n        // Translates to center of screen\n        text.translation.set(two.width / 2, two.height / 2);\n        // Color of strokes between vertices \n        text.stroke = 'white';\n        // Width of the strokes \n        text.linewidth = 1;\n        // Check if the size is off\n        svg.add(text)\n        // Find the distance between each vertice\n        console.log(\"text:\")\n        text.distances = calculateDistances(text);\n        console.log(\"svg:\")\n        console.log(svg.children)\n        svg.distances = [];\n        [...svg.children].forEach(child => {\n            let result = calculateDistances(child);\n            svg.distances.push(result[0]);\n        });\n        // Total distance made so far\n        svg.total = 0;\n        _.each(svg.distances, function(d) {\n            svg.total += d;\n        });\n        console.log(svg.total)\n        resize(svg, two);\n        // Callbacks for update (called each frame at 60fps) and on page resize\n        two.bind('update', function() {\n                if (t < 0.9999) {\n                    // How fast the text is gone through\n                    t += 0.00625;\n                    // 2.67 sec at 0.00625\n                } else {\n                    two.unbind('update')\n                }\n                setEnding(svg, t);\n        })\n        two.play();\n    }\n*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}