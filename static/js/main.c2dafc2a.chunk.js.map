{"version":3,"sources":["misc.js","ColorPicker.js","ColorOptions.js","FontOptions.js","IconOptions.js","ShapeOptions.js","HistoryPalette.js","AnimationOptions.js","App.js","serviceWorker.js","index.js"],"names":["cmap","v","i1","i2","o1","o2","min","max","Math","clamp","map","setEnding","group","t","i","traversed","total","current","console","log","children","_","each","child","distance","distances","pct","ending","makeGradient","rect","colors","two","index","linearGradient","makeLinearGradient","width","height","Two","Stop","fill","ColorPicker","props","handleClick","setState","displayColorPicker","state","handleClose","handleChange","color","hex","styles","reactCSS","borderRadius","background","this","swatch","padding","boxShadow","display","cursor","popover","position","zIndex","cover","top","right","bottom","left","id","style","onClick","onChange","handlechange","React","Component","ColorOptions","check","select","type","isGradient","grad","colorChange","solid","FontOptions","htmlFor","name","onchange","IconOptions","svgClick","size","Types","svg","fullscreen","shapeDiv","document","getElementById","appendTo","circle","makeCircle","makeRectangle","line","makeLine","linewidth","star","makeStar","rounded","makeRoundedRectangle","pentagon","makePolygon","hexagon","makeGroup","update","onclick","HistoryPalette","rectangle","Group","createSVG","font","text","svgElement","createElementNS","path","getPath","toSVG","pathElement","DOMParser","parseFromString","firstChild","appendChild","App","points","loaded","hide","selectedSVG","updateText","bind","updateFont","updateBG","updateColorState","updateHide","selectShape","setSVG","removePoints","draw","drawingBoard","ctx","translation","set","renderBG","instantDraw","noStroke","opentype","load","err","loadedfont","unbind","interpret","noFill","center","stroke","clear","length","element","elem","x","y","a","d","vertices","b","distanceTo","resize","play","e","undefined","nativeEvent","target","value","file","files","reader","FileReader","onload","parse","result","readAsArrayBuffer","hasAttribute","nodeName","div","removeShape","clientX","clientY","newPoints","scale","makeSVG","push","shape","removeSVG","oldshape","remove","pop","point","className","style1","onContextMenu","ShapeOptions","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c2dafc2a.chunk.js","sourcesContent":["import _ from 'underscore';\r\nimport Two from 'two.js';\r\n// Moves the text to middle of the newly sized page\r\nexport function resize(svg, two) {\r\n    svg.translation.set(two.width / 2, two.height / 2);\r\n}\r\n\r\nexport function calculateDistances(group) {\r\n    // For each path\r\n    return _.map(group.children, function(child) {\r\n        var d = 0, a;\r\n        // For each vertice find the distance between them\r\n        _.each(child.vertices, function(b, i) {\r\n            // Skip the first vertice\r\n            if (i > 0) {\r\n                d += a.distanceTo(b);\r\n            }\r\n            a = b;\r\n            });\r\n        return d;\r\n    });\r\n}\r\n\r\n// If value is above max set it to the max value \r\n// If value is above the min set it to minimum value\r\n// Else set to it the value\r\nexport function clamp(v, min, max) {\r\n    return Math.max(Math.min(v, max), min);\r\n}\r\n\r\n// Normalize values to 1\r\n// (value-min) / (max-min)\r\nexport function map(v, i1, i2, o1, o2) {\r\n    return o1 + (o2 - o1) * ((v - i1) / (i2 - i1));\r\n}\r\n\r\n// Normalizes each value then clamp it \r\nexport function cmap(v, i1, i2, o1, o2) {\r\n    return clamp(map(v, i1, i2, o1, o2), o1, o2);\r\n}\r\n\r\nexport function setEnding(group, t) {\r\n    // Current iteration\r\n    var i = 0;\r\n    // t is a percentage, group.total is total distance \r\n    var traversed = t * group.total;\r\n    var current = 0;\r\n    console.log(group.children)\r\n    // For each path in group\r\n    _.each(group.children, function(child) {\r\n      var distance = group.distances[i];\r\n      // Minimum distance\r\n      var min = current;\r\n      // Maximum distance\r\n      var max = current + distance;\r\n      // End point\r\n      var pct = cmap(traversed, min, max, 0, 1);\r\n      // Set endpoint\r\n      child.ending = pct;\r\n      // Set new current to max\r\n      current = max;\r\n      i++;\r\n    });\r\n}\r\n\r\nexport function makeGradient(rect, colors, two){\r\n    colors.index = 0;\r\n    var linearGradient = two.makeLinearGradient(\r\n        two.width / 2, - two.height / 2,\r\n        two.width / 2, two.height / 2,\r\n        new Two.Stop(0, colors[0]),\r\n        new Two.Stop(0.5, colors[1]),\r\n        new Two.Stop(1, colors[2])\r\n    );\r\n\r\n    rect.fill = linearGradient;\r\n    return rect;\r\n}\r\n\r\n\r\n/*\r\nexport function clearT(svg, t) {\r\n    t = 0;\r\n    setEnding(svg, 0);\r\n    let startOver = _.after(60, clearT);\r\n    return startOver, t\r\n};*/","import React from 'react'\r\nimport reactCSS from 'reactcss'\r\nimport { SketchPicker } from 'react-color'\r\n\r\nclass ColorPicker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      displayColorPicker: false\r\n    };\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState({ displayColorPicker: !this.state.displayColorPicker })\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ displayColorPicker: false })\r\n  };\r\n\r\n  handleChange = (color) => {\r\n    this.setState({ color: color.hex })\r\n  };\r\n\r\n  render() {\r\n    const styles = reactCSS({\r\n      'default': {\r\n        color: {\r\n          width: '36px',\r\n          height: '14px',\r\n          borderRadius: '2px',\r\n          background: this.props.color\r\n        },\r\n        swatch: {\r\n          padding: '5px',\r\n          background: '#fff',\r\n          borderRadius: '1px',\r\n          boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\r\n          display: 'inline-block',\r\n          cursor: 'pointer',\r\n        },\r\n        popover: {\r\n          position: 'absolute',\r\n          zIndex: '2',\r\n        },\r\n        cover: {\r\n          position: 'fixed',\r\n          top: '0px',\r\n          right: '0px',\r\n          bottom: '0px',\r\n          left: '0px',\r\n        },\r\n      },\r\n    });\r\n\r\n    return (\r\n      <div id={this.props.id}>\r\n        <div style={ styles.swatch } onClick={ this.handleClick }>\r\n          <div style={ styles.color } />\r\n        </div>\r\n        { this.state.displayColorPicker ? <div style={ styles.popover }>\r\n          <div style={ styles.cover } onClick={ this.handleClose }/>\r\n          <SketchPicker color={this.props.color} onChange={ this.props.handlechange} />\r\n        </div> : null }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ColorPicker;","import React from 'react';\r\nimport ColorPicker from './ColorPicker'\r\n\r\nclass ColorOptions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let check = null;\r\n        let select = null;\r\n        check = \r\n            <div>\r\n                <label>Background: Gradient</label>\r\n                <input type=\"checkbox\" onClick={this.props.check} id=\"checkbg\"/>\r\n            </div>\r\n        \r\n        if(this.props.isGradient){\r\n            select = \r\n                <div style={{display: \"flex\"}}> \r\n                    Gradient Color:\r\n                    <ColorPicker color={this.props.grad[0]} handlechange={this.props.colorChange} id=\"grad0\"/>\r\n                    <ColorPicker color={this.props.grad[1]} handlechange={this.props.colorChange} id=\"grad1\"/>\r\n                    <ColorPicker color={this.props.grad[2]} handlechange={this.props.colorChange} id=\"grad2\"/>\r\n                </div>\r\n        } else {\r\n            select = \r\n                <div style={{display: \"flex\"}}>\r\n                    Solid Color:\r\n                    <ColorPicker color={this.props.solid} handlechange={this.props.colorChange} id=\"solid\"/>\r\n                </div>\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                {check}\r\n                {select}\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default ColorOptions;","import React from 'react';\r\nclass FontOptions extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"fontinput\">\r\n                <label htmlFor=\"file\">Upload Font:</label>\r\n                <input type=\"file\" id=\"file\" name=\"file\" onChange={this.props.onchange}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FontOptions;","import React from 'react';\r\nimport { FaGithub, FaLinkedin, FaInstagram, FaTwitter, FaEnvelope} from 'react-icons/fa';\r\nimport reactCSS from 'reactcss';\r\n\r\nclass IconOptions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>Icons:</div>\r\n                <div id=\"iconsvg\">\r\n                    <FaLinkedin onClick={this.props.svgClick} size={32} />\r\n                    <FaGithub onClick={this.props.svgClick} size={32} />\r\n                    <FaInstagram onClick={this.props.svgClick} size={32} />\r\n                    <FaTwitter onClick={this.props.svgClick} size={32} />\r\n                    <FaEnvelope onClick={this.props.svgClick} size={32} />\r\n                </div>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default IconOptions;","import React from 'react';\r\nimport Two from 'two.js';\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nclass IconOptions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount(){\r\n        var two = new Two({\r\n            type: Two.Types.svg,\r\n            fullscreen: false,\r\n            width: 400,\r\n            height: 32\r\n        });\r\n        let shapeDiv = document.getElementById(\"shapes\");\r\n        two.appendTo(shapeDiv);\r\n        var circle = two.makeCircle(16, 16, 15);\r\n        var rect = two.makeRectangle(48, 16, 31, 31);\r\n        var line = two.makeLine(64, 16, 96, 16);\r\n        line.linewidth = 8;\r\n        var star = two.makeStar(112, 16, 32, 16, 5);\r\n        var rounded = two.makeRoundedRectangle(144, 16, 31, 31);\r\n        var pentagon = two.makePolygon(176, 16, 16, 5);\r\n        var hexagon = two.makePolygon(208, 16, 16, 6);\r\n        var group = two.makeGroup(circle, rect, line, star, rounded, pentagon, hexagon)\r\n        group.fill = \"black\"\r\n        two.update();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>Shapes:</div>\r\n                <div id=\"shapes\" onClick={this.props.onclick}>\r\n                </div>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default IconOptions;","import React from 'react';\r\n\r\nclass HistoryPalette extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>History:</div>\r\n                <button onClick={this.props.onclick}>Undo</button>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default HistoryPalette;","import React from 'react';\r\n\r\nclass IconOptions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>Animation Type:</div>\r\n                <div>\r\n                </div>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default IconOptions;","import React from 'react';\nimport Two from 'two.js';\nimport opentype from 'opentype.js';\nimport {setEnding, calculateDistances, resize, makeGradient} from './misc';\nimport ColorOptions from './ColorOptions';\nimport FontOptions from './FontOptions';\nimport IconOptions from './IconOptions';\nimport ShapeOptions from './ShapeOptions';\nimport AnimationOptions from './AnimationOptions';\nimport HistoryPallete from './HistoryPalette';\nimport _ from 'underscore';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nvar two = null;\nvar t = 0;\nvar rectangle = null;\nvar svg = new Two.Group();\n\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            text: \"null\",\n            svg :  null,\n            font:  null, \n            t   :  0,\n            isGradient : false,\n            grad       : ['#ff4040', '#ff8000', '#00c8ff'],\n            solid      : \"#AB2567\",\n            rectangle  : null,\n            points :  [],  \n            loaded : false,\n            hide   : false,\n            selectedSVG: null,\n            svg : null,\n            shape : null\n        }\n\n        this.updateText = this.updateText.bind(this);\n        this.updateFont = this.updateFont.bind(this);\n        this.updateBG = this.updateBG.bind(this);\n        this.updateColorState = this.updateColorState.bind(this);\n        this.updateHide = this.updateHide.bind(this);\n        this.selectShape = this.selectShape.bind(this);\n        this.setSVG = this.setSVG.bind(this);\n        this.removePoints = this.removePoints.bind(this);\n        this.svgClick = this.svgClick.bind(this);\n        this.draw = this.draw.bind(this);\n    }\n\n    componentDidMount(){\n        // Load TwoJs Instance\n        two = new Two({\n            type: Two.Types.svg,\n            fullscreen: true\n        });\n        let drawingBoard = document.getElementById(\"drawingBoard\");\n        two.appendTo(drawingBoard);\n        let ctx = this;\n        two.bind('resize', function(){\n            svg.translation.set(two.width / 2, two.height / 2)\n            ctx.renderBG();\n            ctx.instantDraw();\n        }) \n\n        // Set Color\n        rectangle = two.makeRectangle(two.width / 2, two.height / 2, two.width, two.height);\n        rectangle.noStroke();\n        rectangle.fill = this.state.solid;\n\n        // Load Font\n        opentype.load('https://opentype.js.org/fonts/FiraSansMedium.woff', function(err, loadedfont) {\n            if (err) {\n                 console.log('Font could not be loaded: ' + err);\n            } else {\n                ctx.state.font = loadedfont;\n                ctx.draw();\n            }\n        });\n    }\n\n    renderBG(){\n        rectangle = two.makeRectangle(two.width / 2, two.height / 2, two.width, two.height);\n        rectangle.noStroke();\n        if(this.state.isGradient){\n            rectangle = makeGradient(rectangle, this.state.grad, two);\n        } else {\n            rectangle.fill = this.state.solid;\n        }\n\n    }\n\n    instantDraw(){\n        if(this.state.font != null && this.state.text != null){\n            two.unbind('update') \n            let svgElement = createSVG(this.state.font, this.state.text);\n            svg = two.interpret(svgElement);\n            svg.noFill();\n            svg.center()\n            svg.translation.set(two.width / 2, two.height / 2);\n            svg.stroke = 'white';\n            svg.linewidth = 1;\n        }\n    }\n\n    draw() {\n        if(svg != null){\n            two.unbind('update')\n            if(svg.distances != null){\n                setEnding(svg, 0);\n            }\n            t = 0;\n            two.clear();\n            this.renderBG();\n        }\n        // Create the SVG for Twojs\n        let result = createSVG(this.state.font, this.state.text);\n        let svgElement = result.svg;\n        // Convert SVG to Twojs Group\n        if(this.state.points.length >= 1) {\n            let points = this.state.points;\n            for (let index = 0; index < points.length; index++) {\n                let element = points[index];\n                element = element.svg;\n                let path = document.getElementById(element.id);\n                let elem = two.interpret(path);\n                elem.translation.set(points[index].x, points[index].y);\n                elem.noFill();\n                elem.stroke = 'white';\n                elem.linewidth = 1;\n            }\n        }\n        svg = two.interpret(svgElement);\n        // Dont fill inside the shape\n        svg.noFill();\n        // Percentage of SVG drawn\n        // Sets vertices around center of group\n        svg.center()\n        // Translates to center of screen\n        svg.translation.set(two.width / 2, two.height / 2);\n        // Color of strokes between vertices \n        svg.stroke = 'black';\n        // Width of the strokes \n        svg.linewidth = 2;\n        // Find the distance between each vertice\n        svg.distances = calculateDistances(svg);\n        // Total distance made so far\n        svg.total = 0;\n        _.each(svg.distances, function(d) {\n            svg.total += d;\n        });\n        resize(svg, two);\n        // Callbacks for update (called each frame at 60fps) and on page resize\n        two.bind('update', function() {\n                if (t < 0.9999) {\n                    // How fast the text is gone through\n                    t += 0.00625;\n                    // 2.67 sec at 0.00625\n                } else {\n                    two.unbind('update')\n                }\n                setEnding(svg, t);\n        })\n        two.play();\n    }\n\n    updateText(e){\n        if(e != undefined){\n            e = e.nativeEvent;\n            this.setState({\n                ...this.state, \n                text: e.target.value\n            })\n        }\n    }\n\n    updateFont(e){\n        e = e.nativeEvent;\n        var file = e.target.files[0];\n        var reader = new FileReader();\n        let read = function(e) {\n            try {\n                let font = opentype.parse(e.target.result);\n                this.setState({\n                    ...this.state, \n                    font: font\n                })\n            } catch (err) {\n                console.log(err)\n            }\n        }\n        reader.onload = read.bind(this);\n        reader.readAsArrayBuffer(file);\n    }\n\n    updateColorState(color, e){\n        rectangle = two.makeRectangle(two.width / 2, two.height / 2, two.width, two.height);\n        rectangle.noStroke();\n\n        if(this.state.isGradient){\n            if('nativeEvent' in e){\n                e = e.nativeEvent;\n            } \n            if(e != undefined){\n                let id = null;\n                for (let index = 0; index < e.path.length; index++) {\n                    var element = e.path[index];\n                    if(element.hasAttribute('id')){\n                        id = e.path[index].id;\n                        break;\n                    }\n                }\n                let index = 0;\n                switch(id){\n                    case \"grad0\":\n                        index = 0;\n                        break;\n                    case \"grad1\":\n                        index = 1;\n                        break;\n                    case \"grad2\":\n                        index = 2;\n                        break;\n                    default:\n                        console.log(\"error\")\n                        console.log(e)\n                        return;\n                }\n                let result = this.state.grad;\n                result[index] = color.hex;\n                this.setState({\n                    grad: result\n                })\n            }\n            rectangle = makeGradient(rectangle, this.state.grad, two);\n\n        } else {\n            this.setState({\n                ...this.state,\n                solid: color.hex\n            })\n            rectangle.fill = this.state.solid;\n        }\n    }\n\n    updateBG(){\n        rectangle = two.makeRectangle(two.width / 2, two.height / 2, two.width, two.height);\n        rectangle.noStroke();\n        if(this.state.isGradient){\n            this.setState({...this.state, isGradient: false});\n            rectangle.fill = this.state.solid;\n        } else {\n            this.setState({...this.state, isGradient: true});\n            rectangle = makeGradient(rectangle, this.state.grad, two);\n        }\n    }\n\n    updateHide(){\n        if(this.state.hide){\n            this.setState({hide: false});\n        } else {\n            this.setState({hide: true});\n        }\n    }\n\n    svgClick(e){\n        e = e.nativeEvent;\n        let svg = null;\n        for (let index = 0; index < e.path.length; index++) {\n            var element = e.path[index];\n            if(element.nodeName == 'svg'){\n                svg = e.path[index];\n                break;\n            }\n        }\n\n        let div = document.getElementById(\"iconsvg\").children;\n        for (let index = 0; index < div.length; index++) {\n            const element = div[index];\n            if(element == svg){\n                if(element != this.state.selectedSVG){\n                    element.style.fill = \"blue\";\n                    this.setState({ selectedSVG: svg})\n                    this.removeShape();\n                } else {\n                    element.style.fill = \"black\";\n                    this.setState({ selectedSVG: null})\n                }  \n            } else {\n                element.style.fill = \"black\";\n            }\n        }\n    }\n\n    setSVG(e){\n        if(this.state.selectedSVG != null){\n            let x = e.clientX;\n            let y = e.clientY;\n            let newPoints = this.state.points;\n            let svg = null;\n            svg = makeSVG(this.state.selectedSVG, x , y);\n            newPoints.push({x: x, y: y, svg: svg})\n            this.setState({ points: newPoints });\n        } else if(this.state.shape != null) {\n            let x = e.clientX;\n            let y = e.clientY;\n            let shape = this.state.shape;\n            shape = two.interpret(shape);\n            shape.translation.set(x, y);\n            let newPoints = this.state.points;\n            newPoints.push({x: x, y: y, svg: shape})\n            this.setState({points: newPoints})\n        } else {\n            console.log(\"empty\")\n        }\n    }\n\n    selectShape(e){\n        if(e.nativeEvent.path[0].nodeName == \"path\"){\n            let shape = e.nativeEvent.path[0];\n            // Current shape is not the same shape.\n            // There is no shape selected currently\n            if(this.state.shape == null){\n                shape.style.fill = \"blue\";\n                shape.style.stroke = \"blue\";\n                this.setState({ shape: shape}) \n                this.removeSVG();\n            // Current shape is the same shape\n            } else if (this.state.shape == shape) {\n                shape.style.fill = \"black\";\n                shape.style.stroke = \"black\";\n                this.setState({ shape: null}) \n            } else {\n                let oldshape = this.state.shape;\n                oldshape.style.fill = \"black\";\n                oldshape.style.stroke = \"black\";\n                shape.style.fill = \"blue\";\n                shape.style.stroke = \"blue\";\n                this.setState({ shape: shape}) \n                this.removeSVG();\n                \n            }\n        }\n    }\n\n    removeSVG(){\n        if(this.state.selectedSVG){\n            let svg = this.state.selectedSVG;\n            svg.style.fill = \"black\";\n            this.setState({selectedSVG: null})\n        }\n    }\n\n    removeShape(){\n        if(this.state.shape){\n            let shape = this.state.shape;\n            shape.style.fill = \"black\";\n            shape.style.stroke = \"black\";\n            this.setState({shape: null})\n        }\n    }\n\n    removePoints(){\n        if(this.state.points.length >= 1){\n            let lastPoint = this.state.points[this.state.points.length-1];\n            lastPoint.svg.remove();\n            let newPoints = this.state.points;\n            newPoints.pop();\n            this.setState({ point: newPoints });\n        }\n    }\n\n    render() {\n        if(this.state.hide){\n            let style1 = \"center\";\n            let style2 = \"small\";\n            return (\n                    <div>\n                        <div id=\"form\" className={style1 + \" \" + style2}>\n                            <button id=\"draw\" onClick={this.draw}>Draw</button>\n                            <button id=\"hide\" onClick={this.updateHide}>Show</button>\n                        </div>\n                        <div id=\"drawingBoard\" onClick={this.setSVG} >\n                        </div>\n                    </div>\n                   )\n        } else {\n            return (\n                <div>\n                    <div id=\"form\" className=\"flex-col\" onContextMenu={this.removePoints}>\n                    <div>\n                        <label>Choose Text:</label>\n                        <input id=\"textin\" type=\"text\" onChange={this.updateText}/>\n                    </div>\n                    <FontOptions onchange={this.updateFont}/>\n                    <ColorOptions isGradient={this.state.isGradient} check={this.updateBG} grad={this.state.grad} solid={this.state.solid} colorChange={this.updateColorState}/>\n                    <ShapeOptions onclick={this.selectShape}/>\n                    <IconOptions svgClick={this.svgClick}/>\n                    <HistoryPallete onclick={this.removePoints}/>\n                    <div className=\"center\">\n                        <button id=\"draw\" onClick={this.draw}>Draw</button>\n                        <button id=\"hide\" onClick={this.updateHide}>Hide</button>\n                    </div>\n                    </div>\n                    <div id=\"drawingBoard\" onClick={this.setSVG} >\n                    </div>\n              </div>\n            )\n        }\n    }\n}\n\n/*\n                        <label>URL:</label>\n                        <input id=\"checkurl\" type=\"checkbox\" onClick={this.updateInput}/>\n*/\nfunction createSVG(font, text){\n    let svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    let path = font.getPath(text, 0, 150, 100);\n    path = path.toSVG();\n    let pathElement = new DOMParser().parseFromString(path, \"text/xml\");\n    pathElement = pathElement.firstChild;\n    svgElement.appendChild(pathElement);\n    return {svg: svgElement, path: pathElement}\n} \n\nfunction makeSVG(svg, x, y){\n    if(svg != null){\n        svg = two.interpret(svg);\n        svg.noFill();\n        svg.scale = 0.25;\n        svg.center()\n        svg.translation.set(x, y);\n        svg.stroke = 'white';\n        svg.linewidth = 1;\n        return svg;\n    }\n}\n\n/*\n    draw() {\n        if(svg != null){\n            two.unbind('update')\n            if(svg.distances != null){\n                setEnding(svg, 0);\n            }\n            t = 0;\n            two.clear();\n            this.renderBG();\n        }\n        // Create the SVG for Twojs\n        let result = createSVG(this.state.font, this.state.text);\n        let svgElement = result.svg;\n        //let pathElement = result.path;\n        // Convert SVG to Twojs Group\n        if(this.state.points.length >= 1) {\n            let points = this.state.points;\n            for (let index = 0; index < points.length; index++) {\n                let element = points[index];\n                element = element.svg;\n                let path = document.getElementById(element.id);\n                let elem = two.interpret(path);\n                elem.translation.set(points[index].x, points[index].y);\n                elem.noFill();\n                elem.stroke = 'white';\n                elem.linewidth = 1;\n                svg.add(elem);\n            }\n        }\n        let text = two.interpret(svgElement);\n        // Dont fill inside the shape\n        text.noFill();\n        // Percentage of SVG drawn\n        // Sets vertices around center of group\n        text.center()\n        // Translates to center of screen\n        text.translation.set(two.width / 2, two.height / 2);\n        // Color of strokes between vertices \n        text.stroke = 'white';\n        // Width of the strokes \n        text.linewidth = 1;\n        // Check if the size is off\n        svg.add(text)\n        // Find the distance between each vertice\n        console.log(\"text:\")\n        text.distances = calculateDistances(text);\n        console.log(\"svg:\")\n        console.log(svg.children)\n        svg.distances = [];\n        [...svg.children].forEach(child => {\n            let result = calculateDistances(child);\n            svg.distances.push(result[0]);\n        });\n        // Total distance made so far\n        svg.total = 0;\n        _.each(svg.distances, function(d) {\n            svg.total += d;\n        });\n        console.log(svg.total)\n        resize(svg, two);\n        // Callbacks for update (called each frame at 60fps) and on page resize\n        two.bind('update', function() {\n                if (t < 0.9999) {\n                    // How fast the text is gone through\n                    t += 0.00625;\n                    // 2.67 sec at 0.00625\n                } else {\n                    two.unbind('update')\n                }\n                setEnding(svg, t);\n        })\n        two.play();\n    }\n*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}